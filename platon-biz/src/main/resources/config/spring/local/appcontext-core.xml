<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:redisson="http://redisson.org/schema/redisson"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	                       http://www.springframework.org/schema/context
	                       http://www.springframework.org/schema/context/spring-context-2.5.xsd
	                       http://www.springframework.org/schema/aop
	                       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                           http://redisson.org/schema/redisson
                           classpath:redisson-1.0.xsd
                           http://www.springframework.org/schema/rabbit
                           http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
    <bean id="propertyConfigurer"
          class="com.iquanwai.platon.biz.util.QuaiwaiPlaceholderConfigurer">
    </bean>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:component-scan base-package="com.iquanwai.platon.biz"/>
    <context:annotation-config/>
    <redisson:client>
        <redisson:single-server address="${redis.single.address}" password="${redis.single.password}"/>
    </redisson:client>

    <rabbit:connection-factory id="connectionFactory"
                               port="${rabbitmq.port}"
                               host="${rabbitmq.ip}"
                               username="${rabbitmq.user}"
                               password="${rabbitmq.password}"
                               channel-cache-size="20"
                               connection-timeout="15000"
    />
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory" retry-template="retryTemplate"
                     message-converter="mqConverter">
    </rabbit:template>

    <rabbit:annotation-driven/>

    <bean id="rabbitListenerContainerFactory"
          class="org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="concurrentConsumers" value="3"/>
        <property name="maxConcurrentConsumers" value="10"/>
        <property name="messageConverter" ref="mqConverter"/>
    </bean>
    <bean id="mqConverter" class="com.iquanwai.platon.biz.util.rabbitmq.RabbitMQConverter"/>

    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="500"/>
                <property name="multiplier" value="10.0"/>
                <property name="maxInterval" value="10000"/>
            </bean>
        </property>
    </bean>

    <!-- rabbit:admin标签会自动扫面queue，exchange和bind类型的声明，然后将它们在broker上生成 -->
    <rabbit:admin id="rabbitAdmin" connection-factory="connectionFactory"/>

    <bean id="sa" class="com.sensorsdata.analytics.javasdk.SensorsAnalytics" destroy-method="shutdown">
        <constructor-arg index="0">
            <bean class="com.sensorsdata.analytics.javasdk.SensorsAnalytics.ConcurrentLoggingConsumer">
                <constructor-arg index="0" value="/data/appdatas/sa/service_log.log"/>
            </bean>
        </constructor-arg>
    </bean>
</beans>
